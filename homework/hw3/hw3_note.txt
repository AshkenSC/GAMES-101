HW3 

1) 修改函数 rasterize_triangle(const Triangle& t) in rasterizer.cpp: 在此 处实现与作业 2 类似的插值算法，实现法向量、颜色、纹理颜色的插值。 

（1）如何实现法向量和纹理颜色的插值？
A: 在三角形类的定义里存储了顶点的颜色、法向量、纹理。他们本质都是用向量存储的，因此可以用颜色插值类似的方法去对法向量、纹理颜色做插值。

（2）归根结底，每个像素的最终呈现的颜色，是要受到法向量和纹理颜色的影响的。但如何具体呈现这种影响？
A: 要传到buffer里去，经过结合法向量与纹理的计算，得到最后的颜色。在这之前要先通过插值计算出这个点的法向量和纹理。

（3）那么具体的计算顺序是什么？是先计算这个点的深度，看他是否会被显示，再去算这个点的各种属性；还是先计算这个点的各种属性，再看他是否会被显示？
A：应该是先看是否会被显示。如果都不显示了，还计算这个点干嘛呢？也就是说，（1）屏幕上的每个点，都要计算一下是否在当前渲染的三角形内；（2）对于在三角形内的点，每个点都要插值计算深度看是否会被显示；（3）对要被显示的点，再计算它的法向量、纹理、颜色等等。

**（4）interpolated_shadingcoords是什么？如何计算？
A1：猜想可能要由color, normal和coords共同计算出来。是要放进vertex shader计算吗？
A2：观察其传给了函数中的变量view_pos，而这是一个三维向量。可能意味着这代表着view position，而且是插值获得的view position
A3：观察到rasterize_triangle函数除了传入三角形以外，还传入了一个三维向量的数组view_pos！

（5）pixel_color由fragment_shader(payload)得到，可没有找到fragment_shader这个函数的定义在哪，但奇怪的是，也没有报错。这是怎么回事？
A：fragment_shader根据输入运行命令时传入的参数确定具体是执行哪个shader函数。

（6）一个问题：对于三维物体，包围盒是二维的吗？
猜测：仍然是二维的，包围盒是光栅化阶段要考虑的事情

normal渲染结果
V1：物体上出现着色不正确的三角形，看图片似乎是深度判断出错。查阅论坛，有两种可能：第一个是bounding box有问题；第二个是深度测试有问题。
1. 首先尝试放宽了一些bounding box，问题仍然存在。
2. 问题解决，是当深度值小于当前depth buffer值时，没有更新depth_buffer

blinn-phong
1. 如何表示公式中的I/r^2？
A1: I是光强度向量。r^2为光源到渲染点距离的平方

2. 对公式中系数ka ks kd的困惑，当他们不是常数而是向量时，意味着什么？如果是三维向量，那等式右边三维向量ka和三维向量ambient相乘不是没有意义？
A1:应该使用cwiseProduct将ka和ambient相乘，使其点对点相乘

3. 关于公式中光的方向如何表示：用光照射点的坐标 - 光源坐标

blinn-phong 渲染结果
v1：里面的一些向量计算时没有单位化（为何要单位化？）
v2：光线方向和预期不符，然后我把光线方向的计算改为了light_pos - point（为何是这样减？而不是反过来）

texture：
首先根据纹理坐标得到当前像素点对应的纹理上的颜色